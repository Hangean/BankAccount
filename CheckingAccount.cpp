#include "CheckingAccount.h"void CheckingAccount::deposit(double amount){    if (amount <= 0)    {        cout << "\nThe amount must greater than 0!\n";        return;    }    else        checkingAccountBalance += amount;}void CheckingAccount::withdraw(double amount) {    if (amount > checkingAccountBalance)    {        cout << "Insufficient funds in checking account.\n";        return;    }    checkingAccountBalance -= amount;}CheckingAccount loadCheckingAccount(const std::string& name){    std::ifstream file("TransactionRecord");    if (!file) {        std::cerr << "Failed to open TransactionRecord\n";        return {};                         // default (balance = 100)    }    std::string line;    while (std::getline(file, line)) {        std::stringstream ss(line);        std::string fileUser;        double checking, saving;        std::getline(ss, fileUser, ',');        ss >> checking;        ss.ignore();        ss >> saving;        if (fileUser == name)            return CheckingAccount(fileUser, checking);   // ← return immediately    }    return {};    // user not found}// This function updates the checking balance for a specific uservoid updateCheckingBalance(const string& name, double newBalance) {    ifstream inFile("TransactionRecord");  // Open file for reading    if (!inFile) {        cout << "Failed to open the file!" << endl;        return;    }    vector<string> updatedLines;  // Stores all lines (modified + unchanged)    string line;    // Step 1: Read all lines from the file    while (getline(inFile, line)) {        stringstream ss(line);        string fileUser;        double checking, saving;        // Step 2: Parse the line (format: userName,checking,saving)        getline(ss, fileUser, ',');  // Read user name (until first comma)        ss >> checking;              // Read checking balance        ss.ignore();                 // Skip comma        ss >> saving;                // Read saving balance        // Step 3: Update only the matching user's checking balance        if (fileUser == name) {            cout << "[DEBUG] MATCH FOUND — updating checking balance for: " << fileUser << endl;            checking = newBalance;        }        // Step 4: Rebuild the line as a string        stringstream updated;        updated << fileUser << "," << fixed << setprecision(2)                << checking << "," << saving;        updatedLines.push_back(updated.str());  // Save to vector    }    inFile.close();  // Done reading    // Step 5: Overwrite the file with updated content    ofstream outFile("TransactionRecord", ios::trunc); // Truncate = clear file first    if (!outFile) {        cout << "Failed to write to the file!" << endl;        return;    }    for (const string& updatedLine : updatedLines) {        outFile << updatedLine << endl;  // Write each line back to file    }    outFile.close();    cout << "[DEBUG] Final write done to TransactionRecord.\n";    cout << " Balance updated successfully.\n";}