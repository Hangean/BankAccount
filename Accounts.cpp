#include "Accounts.h"#include "CheckingAccount.h"#include "SavingsAccount.h"// **** accountChoice ******************************************************// Function to let user select the checking account or saving account// Function will output user choice 1 for checking and 2 for saving// *************************************************************************int accountChoice() {    int choice = 0;    do {        cout << "\nAccount Type Selection\n";        cout << "1: Checking Account\n";        cout << "2: Saving Account\n";        cout << "3: exit\n";        cout << "\nEnter a choice: ";        cin >> choice;        cin.ignore(10000, '\n');        switch (choice) {            case 1:                return 1;            case 2:                return 2;            case 3:                cout << "\nBye for now!" << endl << endl;                return 0;            default:                cout << "Invalid choice. Please enter a number between 1 and 4." << endl;                break;        }    } while (true);}// **** accountServiceOperations *******************************************// Function to check the balance, deduct balance or add into balance// *************************************************************************void accountServiceOperations(Account &account) {    while (true) {        int choice{};        cout << "\nAccount Services Menu\n";        cout << "1: check balance\n";        cout << "2: withdraw\n";        cout << "3: deposit\n";        cout << "4: exit\n";        cout << "\nEnter a choice: ";        cin >> choice;        cin.ignore(10000, '\n');        switch (choice) {            case 1:                cout << "The balance is " << account.getBalance() << endl;                break;            case 2:                int wt;                cout << "Enter an amount to withdraw: ";                cin >> wt;                cin.ignore(10000, '\n');                account.withdraw(wt);                cout << "The balance is " << account.getBalance() << endl;                break;            case 3:                int dpt;                cout << "Enter an amount to deposit: ";                cin >> dpt;                cin.ignore(10000, '\n');                account.deposit(dpt);                cout << "The balance is " << account.getBalance() << endl;                break;            case 4:                cout << "\nYou selected back to the main menu." << endl << endl;                return;            default:                cout << "Invalid choice. Please enter a number between 1 and 4." << endl;                break;        }    };}// Function to check if the username and password in the systembool userAuthentication(string name, string pswd) {    string line;    ifstream iFile("UserFile");    if (!iFile.is_open()) {        cerr << "\nError: Unable to open file 'UserFile'." << endl;        return -1;    }    string userName, password;    while (iFile >> userName >> password) {        if (name == userName && pswd == password)            return true;    }    return false;}void addUser(string nm, string psd) {    // *******Add new name and password to the UserFile ******************************    fstream file("UserFile", ios::in | ios::out | ios::app);    if (!file.is_open()) {        cout << "Failed to open the file.\n";        return;    }    char lastChar;    // The block of code to make sure the new-added name and password will start from    // the very next line to the last line.    file.seekg(-1, ios::end); // Find the position of the last character    file.get(lastChar);    if (lastChar != '\n')        // If statement to move the cursor to the next line if the last char is not \n    {        file << endl;    }    file << nm << " " << psd;    file.close();    // ******************************************************************************    // *******Add new name and password to the TransactionRecord ********************    ofstream outFile("TransactionRecord", ios::app);    if (outFile.is_open()) {        outFile << nm << ",100.00,100.00" << endl;  // default checking & saving balances        outFile.close();    }    // ******************************************************************************    cout << "\nYour account has been created successfully!\n\n";}void accountServiceOperations(CheckingAccount &account) {    while (true) {        int choice{};        cout << "\nAccount Services Menu\n";        cout << "1: check balance\n";        cout << "2: withdraw\n";        cout << "3: deposit\n";        cout << "4: exit\n";        cout << "\nEnter a choice: ";        cin >> choice;        cin.ignore(10000, '\n');        switch (choice) {            case 1:                cout << "The balance is " << account.getBalance() << endl;                break;            case 2: {                double wt;                cout << "Enter an amount to withdraw: ";                cin >> wt;                account.withdraw(wt);                break;            }            case 3: {                double dpt;                cout << "Enter an amount to deposit: ";                cin >> dpt;                account.deposit(dpt);                break;            }            case 4:                cout << "Back to main menu.\n";                return;            default:                cout << "Invalid input.\n";        }    }}